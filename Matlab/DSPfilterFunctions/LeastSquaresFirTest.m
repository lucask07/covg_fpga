%% DSP Filter
%% Generate Coefficients
fc = 200e3;
fs = 5e6;
order = 4;

a = firls(order, [0,fc/(fs/2),(fc/(fs/2)+0.04),1], [1,1,0,0]);

figure(1);
freqz(a, 1, 512, fs);
%% Input
Fs = 5e6;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
%L = 500;             % Length of signal
fsine = 10000;        % frequency of test sinewave
L = round(((1/fsine)/T))*2;
t = (0:L-1)*T;        % Time vector

O = numerictype([],16,0);
%j = 4.096*(t>1e-5);
j = 4.096*sin(2*pi*fsine*t);
%j = 4.096*((0.5e-5<t)&(t<1.5e-5));
%j = 2*sin(2*pi*200000*t) + sin(2*pi*800000*t) + sin(2*pi*600000*t);
%j = sin(2*pi*20000*t) + 2*randn(size(t));

codes = fi('numerictype', O);
%m = numerictype([], 14, 5);
m = numerictype([], 14, 8);
output = fi('numerictype', m);
figure(2);
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    if (j(x)/4.096)>0
        code = fi((j(x)/4.096)*(2^15-1), 'numerictype', O);
    elseif (j(x)/4.096)<0
        code = fi((j(x)/4.096)*(2^15), 'numerictype', O);
    else
        code = fi(0, 'numerictype', O);
    end
    codes = [codes; code];
    out = LeastSquaresFIRFunction(code*2^-15, a);
    %out = LeastSquaresFIR_doublePrecision(code);
    %out = doFilter(code);
    output = [output, out];
    %plot(t(x), out, '*');
    stem(t(x), out);
    hold on;
end

% Plotting Input and Output on same graph
plot(t, codes*2^-15);%normalized the step function here to be able to view both filter output and step voltage
%plot(t, codes);
title('Original Signal and Output of IIR Chebyshev LPF');
xlabel('t[s]');
ylabel('Amplitude');

%% Amplitude Spectrum of input/output

Y = fft(double(codes*2^-15));
Y2 = fft(double(output));

P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

P4 = abs(Y2/L);
P3 = P4(1:L/2+1);
P3(2:end-1) = 2*P3(2:end-1);

f = Fs*(0:(L/2))/L;

figure(3);
subplot(2, 1, 1);
stem(f,P1);
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');

subplot(2, 1, 2);
stem(f,P3); 
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');

%%

function y = LeastSquaresFIRFunction(x, a)
%LEASTSQUARESFIRFUNCTION Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 30-Jun-2021 13:38:43

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % Numerator coefficient vector
    Numerator = a;%[-0.018089 0.029217 0.091916 0.15511 0.20194 0.21921 ...
        %0.20194 0.15511 0.091916 0.029217 -0.018089];
    
    Hd = dsp.FIRFilter( ...
        'Numerator', Numerator, ...
        'CoefficientsDataType', 'Custom', ...
        'CustomCoefficientsDataType', numerictype(true,16,15));
end

% s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
% y = step(Hd,s);
y = Hd(x);


% [EOF]
end
%%

function y = LeastSquaresFIR_doublePrecision(x)
%LEASTSQUARESFIR_DOUBLEPRECISION.FDA Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 01-Jul-2021 11:43:03

%#codegen

% To generate C/C++ code from this function use the codegen command. Type
% 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    % % FIR least-squares Lowpass filter designed using the FIRLS function.
    %
    % % All frequency values are in Hz.
    % Fs = 5000000;  % Sampling Frequency
    %
    % N     = 10;      % Order
    % Fpass = 500000;  % Passband Frequency
    % Fstop = 600000;  % Stopband Frequency
    % Wpass = 1;       % Passband Weight
    % Wstop = 10;      % Stopband Weight
    %
    % % Calculate the coefficients using the FIRLS function.
    % b  = firls(N, [0 Fpass Fstop Fs/2]/(Fs/2), [1 1 0 0], [Wpass Wstop]);
    
    Hd = dsp.FIRFilter( ...
        'Numerator', [0.0250158421185262 0.0618132125350809 ...
        0.105552495617917 0.147314425008783 0.177403242985933 0.18836379727887 ...
        0.177403242985933 0.147314425008783 0.105552495617917 0.0618132125350809 ...
        0.0250158421185262]);
end

y = step(Hd,double(x));


% [EOF]
end

%%

function y = doFilter(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 01-Jul-2021 11:53:18

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N     = 4;        % Order
    % Fstop = 500000;   % Stopband Frequency
    % Astop = 40;       % Stopband Attenuation (dB)
    % Fs    = 5000000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,fst,ast', N, Fstop, Astop, Fs);
    %
    % Hd = design(h, 'cheby2', ...
    %     'SystemObject', true);
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', [1 -1.55971254233345 1 1 -1.70960095672885 ...
        0.804565618250301; 1 -0.324370246269386 1 1 -1.42116311276061 ...
        0.518147065075317], ...
        'ScaleValues', [0.215687864525476; 0.0578791061084831; 1]);
end

s = double(x);
y = step(Hd,s);
end
