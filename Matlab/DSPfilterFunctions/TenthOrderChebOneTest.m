%% Generate SOS Matrix
fc = 1000e3;
fs = 5e6;
order = 4;
StopBandAttenuation = 1;

[z, p, k] = cheby1(order, StopBandAttenuation, fc/(fs/2));

[sos, g] = zp2sos(z, p, k);
sos1 = zp2sos(z, p, k);
figure(1);
freqz(sos1, 512, fs);

%% Input
Fs = 5e6;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
L = 200;             % Length of signal
t = (0:L-1)*T;        % Time vector

O = numerictype([],16,0);
j = 4.096*(t>1e-5);

codes = fi('numerictype', O);
figure(2);
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    if (j(x)/4.096)>0
        code = fi((j(x)/4.096)*(2^15-1), 'numerictype', O);
    elseif (j(x)/4.096)<0
        code = fi((j(x)/4.096)*(2^15), 'numerictype', O);
    else
        code = fi(0, 'numerictype', O);
    end
    codes = [codes; code];
    out = FourthOrderChebOne(code, sos, g);
    %out = doFilter(code);
    plot(t(x), out, '*');
    hold on;
end

% Plotting Input and Output on same graph
plot(t, codes/32767);%normalized the step function here to be able to view both filter output and step voltage
%plot(t, codes);
title('Original Signal and Step Response of IIR LP filter');
xlabel('t[s]');
ylabel('Amplitude');

%% Plotting Group Delay
figure(4);
grpdelay(sos, 512, fs);
title('Group Delay');

%% Plotting Phase Delay
figure(5);
phasedelay(sos, 512, fs);
title('Phase Delay');

%% Step Response
figure(6);
stepz(sos1, 50, fs)
grid

% step response info/measurements
[h, t] = stepz(sos1, 50, fs);
S = stepinfo(h, t);
disp(S);

%%
function y = FourthOrderChebOne(x, sos, g)
%FOURTHORDERCHEBONE Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 25-Jun-2021 14:29:16

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    %Gain       = [3.6109e-06];  % Gain coefficient vector
    Gain       = [g;1;1];
    
    % SOS_Matrix coefficient vector
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,9), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,10), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,13), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,15), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,28), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,29), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],34,28), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],34,29), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

s = fi(x,1,16,15,'RoundingMethod','Round','OverflowAction','Saturate');
y = step(Hd,s);


% [EOF]
end
%%

function y = doFilter(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 25-Jun-2021 21:26:27

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N     = 4;        % Order
    % Fpass = 300000;   % Passband Frequency
    % Apass = 1;        % Passband Ripple (dB)
    % Fs    = 5000000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,fp,ap', N, Fpass, Apass, Fs);
    %
    % Hd = design(h, 'cheby1', ...
    %     'SystemObject', true);
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', [1 2 1 1 -1.77040005141308 0.902241928698322; 1 2 1 1 ...
        -1.73854696931031 0.774262207118471], ...
        'ScaleValues', [0.0329604693213097; 0.00892880945203936; ...
        0.891250938133746], ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,9), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,10), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,13), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,15), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,28), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,29), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],34,28), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],34,29), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
y = step(Hd,s);
end