%% CMD Filter Work
%% Calculating coefficients - Generate SOS Matrix
fc = 40000;
fc1 = fc/2;
fc2 = fc1/2;
fs = 2.5e6;
order = 1;

[z, p, k] = butter(order, fc/(fs/2));
[z1, p1, k1] = butter(order, fc1/(fs/2));
[z2, p2, k2] = butter(order, fc2/(fs/2));

[sos, g] = zp2sos(z, p, k);
sos1 = zp2sos(z, p, k);

[sos_1, g1] = zp2sos(z1, p1, k1);
[sos_2, g2] = zp2sos(z2, p2, k2);

figure(1);
subplot(2,1,1);
freqz([sos1;[1 1 1 1 1 1]], 512, fs);

subplot(2,1,2);
phasez([sos1;[1 1 1 1 1 1]], 512, fs);
xlim([0 fc]);

%% Input
Fs = fs;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
%L = 400;             % Length of signal
fsine = fc;        % frequency of test sinewave
L = round(((1/fsine)/T))*4;
t = (0:L-1)*T;        % Time vector

O = numerictype([],32,31);
%j = (t>1e-5);
j = sin(2*pi*fsine*t);
%j = 0.5*sin(2*pi*fsine*0.25*t) + 0.5*sin(2*pi*(fsine*0.1525)*2*t);

codes = fi('numerictype', O);

m = numerictype([], 14, 13);
output = fi('numerictype', m);
output1 = fi('numerictype', m);
output2 = fi('numerictype', m);
summedOut = fi('numerictype', m);
figure(2);
grid;
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    code = fi(j(x), 'numerictype', O);
    
    codes = [codes; code];
    
    out = doFilter(code, sos, g);
    out1 = doFilter1(code, sos_1, g1);
    out2 = doFilter2(code, sos_2, g2);
    
    output = [output, out];
    output1 = [output1, out1];
    output2 = [output2, out2];
    summedOut = [summedOut, sumGain(out, out1, out2, 200, 200, 200, 1)];
end

% Plotting Input and Output on same graph
%plot(t, codes*2^-15);%normalized the step function here to be able to view both filter output and step voltage
plot(t, codes);
hold on;
plot(t, output);
hold on;
plot(t, output1);
hold on;
plot(t, output2);
hold on;
plot(t, summedOut);
title('Original Signal(s) and Response(s) of CMD filter');
xlabel('t[s]');
ylabel('Amplitude');

%% Xtra Math
newOut = fi((2^13*output), 1, 14, 0);
newOut1 = fi((2^13*output1), 1, 14, 0);
newOut2 = fi((2^13*output2), 1, 14, 0);
newSummedOut = fi((2^13*summedOut), 1, 14, 0);

figure(3);
subplot(2, 1, 1);
plot(t, newOut);
hold on;
subplot(2, 1, 1);
plot(t, newOut1);
hold on;
subplot(2, 1, 1);
plot(t, newOut2);
hold on;
subplot(2, 1, 1);
plot(t, newSummedOut);
title('Step Responses and Normalized Summed Output pre-offset');
xlabel('t[s]');
ylabel('Amplitude');

offset = fi(8192, 0, 14, 0);
newOut = fi((newOut + offset), 0, 14, 0);
newOut1 = fi((newOut1 + offset), 0, 14, 0);
newOut2 = fi((newOut2 + offset), 0, 14, 0);
newSummedOut = fi((newSummedOut + offset), 0, 14, 0);

subplot(2, 1, 2);
plot(t, newOut);
hold on;
subplot(2, 1, 2);
plot(t, newOut1);
hold on;
subplot(2, 1, 2);
plot(t, newOut2);
hold on;
subplot(2, 1, 2);
plot(t, newSummedOut);
title('Step Responses and Normalized Summed Output post-offset');
xlabel('t[s]');
ylabel('Amplitude');

%% Finding Time Constant
t1marker = 0;
t2marker = 0;
tauData = output2;

for x = (1:L)
   if(tauData(x)>=(max(tauData)*0.1) && t1marker == 0)
       t1 = t(x);
       t1marker = 1;
   elseif(tauData(x)>=(max(tauData)*0.9) && t2marker == 0)
       t2 = t(x);
       t2marker = 1;
   end
end

tau = (t2 - t1)/2.2;
disp(['Time Constant is: ', num2str(tau), ' [s]']);

%% Amplitude Spectrum of input/output

Y = fft(double(codes));
Y2 = fft(double(output));

P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

P4 = abs(Y2/L);
P3 = P4(1:L/2+1);
P3(2:end-1) = 2*P3(2:end-1);

f = Fs*(0:(L/2))/L;

figure(4);
subplot(2, 1, 1);
stem(f,P1);
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');

subplot(2, 1, 2);
stem(f,P3); 
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');
%% "Manually" Plotting Group Delay
% [phi,w] = phasez([sos1;[1 1 1 1 1 1]], 512);
% figure(8);
% phasez([sos1;[1 1 1 1 1 1]], 512);
% hold on;
% dphi=gradient(phi(:))./gradient(w(:));
% plot(w,-dphi);
% xlim([0 fc]);

%% Plotting Group Delay
figure(5);
grpdelay([sos;[1 1 1 1 1 1]], 512, fs);
title('Group Delay');
xlim([0 fc]);

%% Plotting Phase Delay
figure(6);
phasedelay([sos;[1 1 1 1 1 1]], 512, fs);
title('Phase Delay');
xlim([0 fc]);

%% Step Response
figure(7);
stepz([sos1;[1 1 1 1 1 1]], 500, fs)
grid

% step response info/measurements
[h, t] = stepz([sos1;[1 1 1 1 1 1]], 500, fs);
S = stepinfo(h, t);
disp(S);


%%
function y = doFilter(x, sos, g)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 30-Jul-2021 19:01:04

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N    = 1;        % Order
    % F3dB = 400;      % 3-dB Frequency
    % Fs   = 2500000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,f3db', N, F3dB, Fs);
    %
    % Hd = design(h, 'butter', ...
    %     'SystemObject', true);
    
    Gain = g;
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],32,31), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],32,31), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,30), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,45), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],50,45), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],50,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],32,31), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,13), ...
        'RoundingMethod', 'Convergent', ...
        'OverflowAction', 'Saturate');
end

%s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
%y = step(Hd,s);
y = Hd(x);
end

%%
function y = doFilter1(x, sos, g)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 30-Jul-2021 19:01:04

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N    = 1;        % Order
    % F3dB = 400;      % 3-dB Frequency
    % Fs   = 2500000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,f3db', N, F3dB, Fs);
    %
    % Hd = design(h, 'butter', ...
    %     'SystemObject', true);
    
    Gain = g;
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],32,31), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],32,31), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,30), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,45), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],50,45), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],50,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],32,31), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,13), ...
        'RoundingMethod', 'Convergent', ...
        'OverflowAction', 'Saturate');
end

%s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
%y = step(Hd,s);
y = Hd(x);
end

%%
function y = doFilter2(x, sos, g)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 30-Jul-2021 19:01:04

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N    = 1;        % Order
    % F3dB = 400;      % 3-dB Frequency
    % Fs   = 2500000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,f3db', N, F3dB, Fs);
    %
    % Hd = design(h, 'butter', ...
    %     'SystemObject', true);
    
    Gain = g;
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],32,31), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],32,31), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,30), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,45), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],50,45), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],50,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],32,31), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,13), ...
        'RoundingMethod', 'Convergent', ...
        'OverflowAction', 'Saturate');
end

%s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
%y = step(Hd,s);
y = Hd(x);
end

%%
function y = sumGain(in1, in2, in3, g1, g2, g3, scaleVal)
%function to take in gains of the three CMD filters, and apply them to
%filter outputs and scale the output back to 14 bits

gtotal = g1 + g2 + g3;

out1 = fi(((g1/gtotal)*in1), 1, 14, 13);
out2 = fi(((g2/gtotal)*in2), 1, 14, 13);
out3 = fi(((g3/gtotal)*in3), 1, 14, 13);

y1 = fi((out1 + out2 + out3), 1, 14, 13);
y = fi((y1/scaleVal), 1, 14, 13);

end
