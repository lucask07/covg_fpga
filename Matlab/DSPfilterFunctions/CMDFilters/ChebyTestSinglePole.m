%% CMD Filter Work
%% Calculating coefficients - Generate SOS Matrix
fc = 400;
fs = 2.5e6;
ripple  = 10;
order = 1;

[z, p, k] = cheby2(order, ripple, fc/(fs/2));

[sos, g] = zp2sos(z, p, k);
sos1 = zp2sos(z, p, k);
figure(1);
freqz(sos1, 512, fs);

%% Input
Fs = fs;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
%L = 100;             % Length of signal
fsine = fc;        % frequency of test sinewave
L = round(((1/fsine)/T))*4;
t = (0:L-1)*T;        % Time vector

O = numerictype([],32,31);
%j = (t>1e-5);
j = sin(2*pi*fsine*t);

codes = fi('numerictype', O);
m = numerictype([], 14, 13);
output = fi('numerictype', m);
figure(2);
grid on;
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    code = fi(j(x), 'numerictype', O);
    codes = [codes; code];
    out = doFilter(code, sos, g);
    output = [output, out];
end

% Plotting Input and Output on same graph
%plot(t, codes*2^-15);%normalized the step function here to be able to view both filter output and step voltage
plot(t, codes);
hold on;
plot(t, output);
title('Original Signal and Response of IIR LP filter');
xlabel('t[s]');
ylabel('Amplitude');

%%
function y = doFilter(x, sos, g)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 30-Jul-2021 19:01:04

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N    = 1;        % Order
    % F3dB = 400;      % 3-dB Frequency
    % Fs   = 2500000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,f3db', N, F3dB, Fs);
    %
    % Hd = design(h, 'butter', ...
    %     'SystemObject', true);
    
    Gain = g;
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],32,31), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],32,31), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,30), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,45), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],50,45), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],50,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],32,31), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,13), ...
        'RoundingMethod', 'Convergent', ...
        'OverflowAction', 'Saturate');
end

%s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
%y = step(Hd,s);
y = Hd(x);
end