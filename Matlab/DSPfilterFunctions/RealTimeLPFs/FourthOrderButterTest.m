%% DSP Filter
%% Generate SOS Matrix
fc = 500e3;
fs = 5e6;
order = 4;

[z, p, k] = butter(order, fc/(fs/2));

%[b,a] = butter(order, fc/(fs/2));

% figure(1);
% phasez(sos, 512, fs);

[sos, g] = zp2sos(z, p, k);
sos1 = zp2sos(z, p, k);
figure(1);
freqz(sos1, 512, fs);
%% Input
Fs = 5e6;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
L = 200;             % Length of signal
%fsine = 10000;        % frequency of test sinewave
%L = round(((1/fsine)/T))*5;
t = (0:L-1)*T;        % Time vector

O = numerictype([],16,0);
j = 4.096*(t>1e-5);
%j = 4.096*sin(2*pi*fsine*t);

codes = fi('numerictype', O);
m = numerictype([], 14, 8);
output = fi('numerictype', m);
figure(2);
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    if (j(x)/4.096)>0
        code = fi((j(x)/4.096)*(2^15-1), 'numerictype', O);
    elseif (j(x)/4.096)<0
        code = fi((j(x)/4.096)*(2^15), 'numerictype', O);
    else
        code = fi(0, 'numerictype', O);
    end
    codes = [codes; code];
    out = FourthOrderButter(code*2^-15, g, sos);
    output = [output, out];
    %out = doFilter(code);
    plot(t(x), out, '*');
    hold on;
end

% Plotting Input and Output on same graph
plot(t, codes*2^-15);%normalized the step function here to be able to view both filter output and step voltage
%plot(t, codes);
title('Original Signal and Step Response of IIR LP filter');
xlabel('t[s]');
ylabel('Amplitude');

%% Amplitude Spectrum of input/output

Y = fft(double(codes*2^-15));
Y2 = fft(double(output));

P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

P4 = abs(Y2/L);
P3 = P4(1:L/2+1);
P3(2:end-1) = 2*P3(2:end-1);

f = Fs*(0:(L/2))/L;

figure(3);
subplot(2, 1, 1);
stem(f,P1);
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');

subplot(2, 1, 2);
stem(f,P3); 
title('Single-Sided Amplitude Spectrum of X(t)');
xlabel('f (Hz)');
ylabel('|P1(f)|');

%% Plotting Group Delay
figure(4);
grpdelay(sos, 512, fs);
title('Group Delay');

%% Plotting Phase Delay
figure(5);
phasedelay(sos, 512, fs);
title('Phase Delay');

%% Step Response
figure(6);
stepz(sos1, 50, fs)
grid

% step response info/measurements
[h, t] = stepz(sos1, 50, fs);
S = stepinfo(h, t);
disp(S);

%% 4th Order Butter

function y = FourthOrderButter(x, g, sos)
%FOURTHORDERBUTTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 24-Jun-2021 19:18:02

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    Gain       = [g; 1; 1];  % Gain coefficient vector
    %Gain = [0.00376220298169873; 0.00353349592337797; 1];
    
    % SOS_Matrix coefficient vector
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,17), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,10), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,13), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,15), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,28), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,29), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],34,28), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],34,29), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

% s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
% y = step(Hd,s);
y = Hd(x);


% [EOF]
end
%%

function y = doFilter(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 25-Jun-2021 10:21:53

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N    = 4;        % Order
    % F3dB = 100000;   % 3-dB Frequency
    % Fs   = 5000000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,f3db', N, F3dB, Fs);
    %
    % Hd = design(h, 'butter', ...
    %     'SystemObject', true);
    
    Hd = dsp.BiquadFilter( ...
        'Structure', 'Direct form II', ...
        'SOSMatrix', [1 2 1 1 -1.8934156010225 0.908464412949295; 1 2 1 1 ...
        -1.77831348813944 0.792447471832947], ...
        'ScaleValues', [0.00376220298169873; 0.00353349592337797; 1], ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,17), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,10), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,13), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,23), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,28), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,29), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],34,28), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],34,29), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
y = step(Hd,s);
end
