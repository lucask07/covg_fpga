// -------------------------------------------------------------
//
// Module: Butterworth
// Generated by MATLAB(R) 9.9 and Filter Design HDL Coder 3.1.8.
// Generated on: 2021-07-02 14:29:36
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// ResetType: Synchronous
// TargetDirectory: C:\Users\iande\Desktop\covg_fpga\Matlab\DSPfilterFunctions\RealTimeLPFs\hdlsrc\Butter
// Name: Butterworth
// CoefficientSource: ProcessorInterface
// TargetLanguage: Verilog
// TestBenchName: Butter_tb
// TestBenchStimulus: step ramp 
// ClockHighTime: 2.5
// ClockLowTime: 2.5

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II Transposed, Second-Order Sections
// Number of Sections  : 2
// Stable              : Yes
// Linear Phase        : No
// Arithmetic          : fixed
// Numerator           : s16,13 -> [-4 4)
// Denominator         : s16,14 -> [-2 2)
// Scale Values        : s16,15 -> [-1 1)
// Input               : s16,15 -> [-1 1)
// Section Input       : s16,17 -> [-2.500000e-01 2.500000e-01)
// Section Output      : s16,10 -> [-32 32)
// Output              : s14,8 -> [-32 32)
// State               : s16,15 -> [-1 1)
// Numerator Prod      : s32,28 -> [-8 8)
// Denominator Prod    : s32,29 -> [-4 4)
// Numerator Accum     : s34,28 -> [-32 32)
// Denominator Accum   : s34,29 -> [-16 16)
// Round Mode          : convergent
// Overflow Mode       : wrap
// Cast Before Sum     : false
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module Butterworth
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                write_enable,
                write_done,
                write_address,
                coeffs_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  input   write_enable; 
  input   write_done; 
  input   [3:0] write_address; //ufix4
  input   signed [15:0] coeffs_in; //sfix16
  output  signed [13:0] filter_out; //sfix14_En8

////////////////////////////////////////////////////////////////
//Module Architecture: Butterworth
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  signed [15:0] input_register; // sfix16_En15
  reg  write_enable_reg; // boolean
  reg  write_done_reg; // boolean
  reg  [3:0] write_address_reg; // ufix4
  reg  signed [15:0] coeffs_in_reg; // sfix16
  // Section 1   Processor Interface Signals 
  wire signed [15:0] coeff_scale1_assigned; // sfix16_En15
  wire signed [15:0] coeff_scale1_temp; // sfix16_En15
  reg  signed [15:0] coeff_scale1_reg; // sfix16_En15
  reg  signed [15:0] coeff_scale1_shadow_reg; // sfix16_En15
  wire signed [15:0] scale1; // sfix16_En17
  wire signed [31:0] mul_temp; // sfix32_En30
  wire signed [15:0] coeff_b1_section1_assigned; // sfix16_En13
  wire signed [15:0] coeff_b1_section1_temp; // sfix16_En13
  reg  signed [15:0] coeff_b1_section1_reg; // sfix16_En13
  reg  signed [15:0] coeff_b1_section1_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_b2_section1_assigned; // sfix16_En13
  wire signed [15:0] coeff_b2_section1_temp; // sfix16_En13
  reg  signed [15:0] coeff_b2_section1_reg; // sfix16_En13
  reg  signed [15:0] coeff_b2_section1_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_b3_section1_assigned; // sfix16_En13
  wire signed [15:0] coeff_b3_section1_temp; // sfix16_En13
  reg  signed [15:0] coeff_b3_section1_reg; // sfix16_En13
  reg  signed [15:0] coeff_b3_section1_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_a2_section1_assigned; // sfix16_En14
  wire signed [15:0] coeff_a2_section1_temp; // sfix16_En14
  reg  signed [15:0] coeff_a2_section1_reg; // sfix16_En14
  reg  signed [15:0] coeff_a2_section1_shadow_reg; // sfix16_En14
  wire signed [15:0] coeff_a3_section1_assigned; // sfix16_En14
  wire signed [15:0] coeff_a3_section1_temp; // sfix16_En14
  reg  signed [15:0] coeff_a3_section1_reg; // sfix16_En14
  reg  signed [15:0] coeff_a3_section1_shadow_reg; // sfix16_En14
  // Section 1 Signals 
  wire signed [33:0] ab1sum1; // sfix34_En28
  wire signed [33:0] ab2sum1; // sfix34_En29
  wire signed [33:0] ab3sum1; // sfix34_En28
  wire signed [33:0] b2sum1; // sfix34_En28
  wire signed [33:0] b2sum_typeconvert1; // sfix34_En29
  reg  signed [15:0] delay1_section1; // sfix16_En15
  reg  signed [15:0] delay2_section1; // sfix16_En15
  wire signed [15:0] inputconv1; // sfix16_En17
  wire signed [15:0] feedback1; // sfix16_En10
  wire signed [31:0] a2mul1; // sfix32_En29
  wire signed [31:0] a3mul1; // sfix32_En29
  wire signed [31:0] b1mul1; // sfix32_En28
  wire signed [31:0] b2mul1; // sfix32_En28
  wire signed [31:0] b3mul1; // sfix32_En28
  wire signed [31:0] mul_temp_1; // sfix32_En24
  wire signed [31:0] mul_temp_2; // sfix32_En24
  wire signed [31:0] mul_temp_3; // sfix32_En30
  wire signed [31:0] mul_temp_4; // sfix32_En30
  wire signed [31:0] mul_temp_5; // sfix32_En30
  wire signed [32:0] sub_signext; // sfix33_En29
  wire signed [32:0] sub_signext_1; // sfix33_En29
  wire signed [33:0] sub_temp; // sfix34_En29
  wire signed [31:0] add_signext; // sfix32_En28
  wire signed [31:0] add_signext_1; // sfix32_En28
  wire signed [32:0] add_temp; // sfix33_En28
  wire signed [33:0] sub_signext_2; // sfix34_En29
  wire signed [33:0] sub_signext_3; // sfix34_En29
  wire signed [34:0] sub_temp_1; // sfix35_En29
  wire signed [31:0] add_signext_2; // sfix32_En28
  wire signed [31:0] add_signext_3; // sfix32_En28
  wire signed [32:0] add_temp_1; // sfix33_En28
  wire signed [15:0] delay1_typeconvert1; // sfix16_En15
  wire signed [15:0] delay2_typeconvert1; // sfix16_En15
  // Section 2   Processor Interface Signals 
  wire signed [15:0] coeff_scale2_assigned; // sfix16_En15
  wire signed [15:0] coeff_scale2_temp; // sfix16_En15
  reg  signed [15:0] coeff_scale2_reg; // sfix16_En15
  reg  signed [15:0] coeff_scale2_shadow_reg; // sfix16_En15
  wire signed [15:0] scale2; // sfix16_En17
  wire signed [31:0] mul_temp_6; // sfix32_En25
  wire signed [15:0] coeff_b1_section2_assigned; // sfix16_En13
  wire signed [15:0] coeff_b1_section2_temp; // sfix16_En13
  reg  signed [15:0] coeff_b1_section2_reg; // sfix16_En13
  reg  signed [15:0] coeff_b1_section2_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_b2_section2_assigned; // sfix16_En13
  wire signed [15:0] coeff_b2_section2_temp; // sfix16_En13
  reg  signed [15:0] coeff_b2_section2_reg; // sfix16_En13
  reg  signed [15:0] coeff_b2_section2_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_b3_section2_assigned; // sfix16_En13
  wire signed [15:0] coeff_b3_section2_temp; // sfix16_En13
  reg  signed [15:0] coeff_b3_section2_reg; // sfix16_En13
  reg  signed [15:0] coeff_b3_section2_shadow_reg; // sfix16_En13
  wire signed [15:0] coeff_a2_section2_assigned; // sfix16_En14
  wire signed [15:0] coeff_a2_section2_temp; // sfix16_En14
  reg  signed [15:0] coeff_a2_section2_reg; // sfix16_En14
  reg  signed [15:0] coeff_a2_section2_shadow_reg; // sfix16_En14
  wire signed [15:0] coeff_a3_section2_assigned; // sfix16_En14
  wire signed [15:0] coeff_a3_section2_temp; // sfix16_En14
  reg  signed [15:0] coeff_a3_section2_reg; // sfix16_En14
  reg  signed [15:0] coeff_a3_section2_shadow_reg; // sfix16_En14
  // Section 2 Signals 
  wire signed [33:0] ab1sum2; // sfix34_En28
  wire signed [33:0] ab2sum2; // sfix34_En29
  wire signed [33:0] ab3sum2; // sfix34_En28
  wire signed [33:0] b2sum2; // sfix34_En28
  wire signed [33:0] b2sum_typeconvert2; // sfix34_En29
  reg  signed [15:0] delay1_section2; // sfix16_En15
  reg  signed [15:0] delay2_section2; // sfix16_En15
  wire signed [15:0] inputconv2; // sfix16_En17
  wire signed [15:0] feedback2; // sfix16_En10
  wire signed [31:0] a2mul2; // sfix32_En29
  wire signed [31:0] a3mul2; // sfix32_En29
  wire signed [31:0] b1mul2; // sfix32_En28
  wire signed [31:0] b2mul2; // sfix32_En28
  wire signed [31:0] b3mul2; // sfix32_En28
  wire signed [31:0] mul_temp_7; // sfix32_En24
  wire signed [31:0] mul_temp_8; // sfix32_En24
  wire signed [31:0] mul_temp_9; // sfix32_En30
  wire signed [31:0] mul_temp_10; // sfix32_En30
  wire signed [31:0] mul_temp_11; // sfix32_En30
  wire signed [32:0] sub_signext_4; // sfix33_En29
  wire signed [32:0] sub_signext_5; // sfix33_En29
  wire signed [33:0] sub_temp_2; // sfix34_En29
  wire signed [31:0] add_signext_4; // sfix32_En28
  wire signed [31:0] add_signext_5; // sfix32_En28
  wire signed [32:0] add_temp_2; // sfix33_En28
  wire signed [33:0] sub_signext_6; // sfix34_En29
  wire signed [33:0] sub_signext_7; // sfix34_En29
  wire signed [34:0] sub_temp_3; // sfix35_En29
  wire signed [31:0] add_signext_6; // sfix32_En28
  wire signed [31:0] add_signext_7; // sfix32_En28
  wire signed [32:0] add_temp_3; // sfix33_En28
  wire signed [15:0] delay1_typeconvert2; // sfix16_En15
  wire signed [15:0] delay2_typeconvert2; // sfix16_En15
  // Last Section Value --   Processor Interface Signals 
  wire signed [15:0] coeff_scale3_assigned; // sfix16_En15
  wire signed [15:0] coeff_scale3_temp; // sfix16_En15
  reg  signed [15:0] coeff_scale3_reg; // sfix16_En15
  reg  signed [15:0] coeff_scale3_shadow_reg; // sfix16_En15
  wire signed [13:0] scale3; // sfix14_En8
  wire signed [31:0] mul_temp_12; // sfix32_En25
  wire signed [13:0] output_typeconvert; // sfix14_En8
  reg  signed [13:0] output_register; // sfix14_En8

  // Block Statements
  always @ ( posedge clk)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
        write_enable_reg <= 1'b0;
        write_done_reg <= 1'b0;
        write_address_reg <= 0;
        coeffs_in_reg <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
          write_enable_reg <= write_enable;
          write_done_reg <= write_done;
          write_address_reg <= write_address;
          coeffs_in_reg <= coeffs_in;
        end
      end
    end // input_reg_process

  //   -------- Section 1 Processor Interface logic------------------

  assign mul_temp = input_register * coeff_scale1_shadow_reg;
  assign scale1 = (mul_temp[28:0] + {mul_temp[13], {12{~mul_temp[13]}}})>>>13;

  assign coeff_scale1_assigned = (write_address_reg == 4'b0000) ? coeffs_in_reg :
                           coeff_scale1_reg;
  assign coeff_scale1_temp = (write_enable_reg == 1'b1) ? coeff_scale1_assigned :
                       coeff_scale1_reg;
  assign coeff_b1_section1_assigned = (write_address_reg == 4'b0001) ? coeffs_in_reg :
                                coeff_b1_section1_reg;
  assign coeff_b1_section1_temp = (write_enable_reg == 1'b1) ? coeff_b1_section1_assigned :
                            coeff_b1_section1_reg;
  assign coeff_b2_section1_assigned = (write_address_reg == 4'b0010) ? coeffs_in_reg :
                                coeff_b2_section1_reg;
  assign coeff_b2_section1_temp = (write_enable_reg == 1'b1) ? coeff_b2_section1_assigned :
                            coeff_b2_section1_reg;
  assign coeff_b3_section1_assigned = (write_address_reg == 4'b0011) ? coeffs_in_reg :
                                coeff_b3_section1_reg;
  assign coeff_b3_section1_temp = (write_enable_reg == 1'b1) ? coeff_b3_section1_assigned :
                            coeff_b3_section1_reg;
  assign coeff_a2_section1_assigned = (write_address_reg == 4'b0100) ? coeffs_in_reg :
                                coeff_a2_section1_reg;
  assign coeff_a2_section1_temp = (write_enable_reg == 1'b1) ? coeff_a2_section1_assigned :
                            coeff_a2_section1_reg;
  assign coeff_a3_section1_assigned = (write_address_reg == 4'b0101) ? coeffs_in_reg :
                                coeff_a3_section1_reg;
  assign coeff_a3_section1_temp = (write_enable_reg == 1'b1) ? coeff_a3_section1_assigned :
                            coeff_a3_section1_reg;
  always @ ( posedge clk)
    begin: coeff_reg_process_section1
      if (reset == 1'b1) begin
        coeff_scale1_reg <= 0;
        coeff_b1_section1_reg <= 0;
        coeff_b2_section1_reg <= 0;
        coeff_b3_section1_reg <= 0;
        coeff_a2_section1_reg <= 0;
        coeff_a3_section1_reg <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          coeff_scale1_reg <= coeff_scale1_temp;
          coeff_b1_section1_reg <= coeff_b1_section1_temp;
          coeff_b2_section1_reg <= coeff_b2_section1_temp;
          coeff_b3_section1_reg <= coeff_b3_section1_temp;
          coeff_a2_section1_reg <= coeff_a2_section1_temp;
          coeff_a3_section1_reg <= coeff_a3_section1_temp;
        end
      end
    end // coeff_reg_process_section1

  always @ ( posedge clk)
    begin: coeff_shadow_reg_process_section1
      if (reset == 1'b1) begin
        coeff_scale1_shadow_reg <= 0;
        coeff_b1_section1_shadow_reg <= 0;
        coeff_b2_section1_shadow_reg <= 0;
        coeff_b3_section1_shadow_reg <= 0;
        coeff_a2_section1_shadow_reg <= 0;
        coeff_a3_section1_shadow_reg <= 0;
      end
      else begin
        if (write_done_reg == 1'b1) begin
          coeff_scale1_shadow_reg <= coeff_scale1_reg;
          coeff_b1_section1_shadow_reg <= coeff_b1_section1_reg;
          coeff_b2_section1_shadow_reg <= coeff_b2_section1_reg;
          coeff_b3_section1_shadow_reg <= coeff_b3_section1_reg;
          coeff_a2_section1_shadow_reg <= coeff_a2_section1_reg;
          coeff_a3_section1_shadow_reg <= coeff_a3_section1_reg;
        end
      end
    end // coeff_shadow_reg_process_section1

  // ------------------ Section 1 ------------------

  assign inputconv1 = scale1;

  assign mul_temp_1 = feedback1 * coeff_a2_section1_shadow_reg;
  assign a2mul1 = $signed({mul_temp_1[26:0], 5'b00000});

  assign mul_temp_2 = feedback1 * coeff_a3_section1_shadow_reg;
  assign a3mul1 = $signed({mul_temp_2[26:0], 5'b00000});

  assign mul_temp_3 = inputconv1 * coeff_b1_section1_shadow_reg;
  assign b1mul1 = ({{2{mul_temp_3[31]}}, mul_temp_3[31:0]} + {mul_temp_3[2], {1{~mul_temp_3[2]}}})>>>2;

  assign mul_temp_4 = inputconv1 * coeff_b2_section1_shadow_reg;
  assign b2mul1 = ({{2{mul_temp_4[31]}}, mul_temp_4[31:0]} + {mul_temp_4[2], {1{~mul_temp_4[2]}}})>>>2;

  assign mul_temp_5 = inputconv1 * coeff_b3_section1_shadow_reg;
  assign b3mul1 = ({{2{mul_temp_5[31]}}, mul_temp_5[31:0]} + {mul_temp_5[2], {1{~mul_temp_5[2]}}})>>>2;

  assign sub_signext = $signed({b3mul1[31:0], 1'b0});
  assign sub_signext_1 = $signed({{1{a3mul1[31]}}, a3mul1});
  assign sub_temp = sub_signext - sub_signext_1;
  assign ab3sum1 = ({{1{sub_temp[33]}}, sub_temp[33:0]} + sub_temp[1])>>>1;

  assign add_signext = b2mul1;
  assign add_signext_1 = $signed({delay2_section1[15:0], 13'b0000000000000});
  assign add_temp = add_signext + add_signext_1;
  assign b2sum1 = $signed({{1{add_temp[32]}}, add_temp});

  assign b2sum_typeconvert1 = $signed({b2sum1[32:0], 1'b0});

  assign sub_signext_2 = b2sum_typeconvert1;
  assign sub_signext_3 = $signed({{2{a2mul1[31]}}, a2mul1});
  assign sub_temp_1 = sub_signext_2 - sub_signext_3;
  assign ab2sum1 = sub_temp_1[33:0];

  assign add_signext_2 = $signed({delay1_section1[15:0], 13'b0000000000000});
  assign add_signext_3 = b1mul1;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign ab1sum1 = $signed({{1{add_temp_1[32]}}, add_temp_1});

  assign delay1_typeconvert1 = (ab2sum1[29:0] + {ab2sum1[14], {13{~ab2sum1[14]}}})>>>14;

  assign delay2_typeconvert1 = (ab3sum1[28:0] + {ab3sum1[13], {12{~ab3sum1[13]}}})>>>13;

  always @ ( posedge clk)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay1_section1 <= 0;
        delay2_section1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay1_section1 <= delay1_typeconvert1;
          delay2_section1 <= delay2_typeconvert1;
        end
      end
    end // delay_process_section1

  assign feedback1 = (ab1sum1[33:0] + {ab1sum1[18], {17{~ab1sum1[18]}}})>>>18;

  //   -------- Section 2 Processor Interface logic------------------

  assign mul_temp_6 = feedback1 * coeff_scale2_shadow_reg;
  assign scale2 = (mul_temp_6[23:0] + {mul_temp_6[8], {7{~mul_temp_6[8]}}})>>>8;

  assign coeff_scale2_assigned = (write_address_reg == 4'b1000) ? coeffs_in_reg :
                           coeff_scale2_reg;
  assign coeff_scale2_temp = (write_enable_reg == 1'b1) ? coeff_scale2_assigned :
                       coeff_scale2_reg;
  assign coeff_b1_section2_assigned = (write_address_reg == 4'b1001) ? coeffs_in_reg :
                                coeff_b1_section2_reg;
  assign coeff_b1_section2_temp = (write_enable_reg == 1'b1) ? coeff_b1_section2_assigned :
                            coeff_b1_section2_reg;
  assign coeff_b2_section2_assigned = (write_address_reg == 4'b1010) ? coeffs_in_reg :
                                coeff_b2_section2_reg;
  assign coeff_b2_section2_temp = (write_enable_reg == 1'b1) ? coeff_b2_section2_assigned :
                            coeff_b2_section2_reg;
  assign coeff_b3_section2_assigned = (write_address_reg == 4'b1011) ? coeffs_in_reg :
                                coeff_b3_section2_reg;
  assign coeff_b3_section2_temp = (write_enable_reg == 1'b1) ? coeff_b3_section2_assigned :
                            coeff_b3_section2_reg;
  assign coeff_a2_section2_assigned = (write_address_reg == 4'b1100) ? coeffs_in_reg :
                                coeff_a2_section2_reg;
  assign coeff_a2_section2_temp = (write_enable_reg == 1'b1) ? coeff_a2_section2_assigned :
                            coeff_a2_section2_reg;
  assign coeff_a3_section2_assigned = (write_address_reg == 4'b1101) ? coeffs_in_reg :
                                coeff_a3_section2_reg;
  assign coeff_a3_section2_temp = (write_enable_reg == 1'b1) ? coeff_a3_section2_assigned :
                            coeff_a3_section2_reg;
  always @ ( posedge clk)
    begin: coeff_reg_process_section2
      if (reset == 1'b1) begin
        coeff_scale2_reg <= 0;
        coeff_b1_section2_reg <= 0;
        coeff_b2_section2_reg <= 0;
        coeff_b3_section2_reg <= 0;
        coeff_a2_section2_reg <= 0;
        coeff_a3_section2_reg <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          coeff_scale2_reg <= coeff_scale2_temp;
          coeff_b1_section2_reg <= coeff_b1_section2_temp;
          coeff_b2_section2_reg <= coeff_b2_section2_temp;
          coeff_b3_section2_reg <= coeff_b3_section2_temp;
          coeff_a2_section2_reg <= coeff_a2_section2_temp;
          coeff_a3_section2_reg <= coeff_a3_section2_temp;
        end
      end
    end // coeff_reg_process_section2

  always @ ( posedge clk)
    begin: coeff_shadow_reg_process_section2
      if (reset == 1'b1) begin
        coeff_scale2_shadow_reg <= 0;
        coeff_b1_section2_shadow_reg <= 0;
        coeff_b2_section2_shadow_reg <= 0;
        coeff_b3_section2_shadow_reg <= 0;
        coeff_a2_section2_shadow_reg <= 0;
        coeff_a3_section2_shadow_reg <= 0;
      end
      else begin
        if (write_done_reg == 1'b1) begin
          coeff_scale2_shadow_reg <= coeff_scale2_reg;
          coeff_b1_section2_shadow_reg <= coeff_b1_section2_reg;
          coeff_b2_section2_shadow_reg <= coeff_b2_section2_reg;
          coeff_b3_section2_shadow_reg <= coeff_b3_section2_reg;
          coeff_a2_section2_shadow_reg <= coeff_a2_section2_reg;
          coeff_a3_section2_shadow_reg <= coeff_a3_section2_reg;
        end
      end
    end // coeff_shadow_reg_process_section2

  // ------------------ Section 2 ------------------

  assign inputconv2 = scale2;

  assign mul_temp_7 = feedback2 * coeff_a2_section2_shadow_reg;
  assign a2mul2 = $signed({mul_temp_7[26:0], 5'b00000});

  assign mul_temp_8 = feedback2 * coeff_a3_section2_shadow_reg;
  assign a3mul2 = $signed({mul_temp_8[26:0], 5'b00000});

  assign mul_temp_9 = inputconv2 * coeff_b1_section2_shadow_reg;
  assign b1mul2 = ({{2{mul_temp_9[31]}}, mul_temp_9[31:0]} + {mul_temp_9[2], {1{~mul_temp_9[2]}}})>>>2;

  assign mul_temp_10 = inputconv2 * coeff_b2_section2_shadow_reg;
  assign b2mul2 = ({{2{mul_temp_10[31]}}, mul_temp_10[31:0]} + {mul_temp_10[2], {1{~mul_temp_10[2]}}})>>>2;

  assign mul_temp_11 = inputconv2 * coeff_b3_section2_shadow_reg;
  assign b3mul2 = ({{2{mul_temp_11[31]}}, mul_temp_11[31:0]} + {mul_temp_11[2], {1{~mul_temp_11[2]}}})>>>2;

  assign sub_signext_4 = $signed({b3mul2[31:0], 1'b0});
  assign sub_signext_5 = $signed({{1{a3mul2[31]}}, a3mul2});
  assign sub_temp_2 = sub_signext_4 - sub_signext_5;
  assign ab3sum2 = ({{1{sub_temp_2[33]}}, sub_temp_2[33:0]} + sub_temp_2[1])>>>1;

  assign add_signext_4 = b2mul2;
  assign add_signext_5 = $signed({delay2_section2[15:0], 13'b0000000000000});
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign b2sum2 = $signed({{1{add_temp_2[32]}}, add_temp_2});

  assign b2sum_typeconvert2 = $signed({b2sum2[32:0], 1'b0});

  assign sub_signext_6 = b2sum_typeconvert2;
  assign sub_signext_7 = $signed({{2{a2mul2[31]}}, a2mul2});
  assign sub_temp_3 = sub_signext_6 - sub_signext_7;
  assign ab2sum2 = sub_temp_3[33:0];

  assign add_signext_6 = $signed({delay1_section2[15:0], 13'b0000000000000});
  assign add_signext_7 = b1mul2;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign ab1sum2 = $signed({{1{add_temp_3[32]}}, add_temp_3});

  assign delay1_typeconvert2 = (ab2sum2[29:0] + {ab2sum2[14], {13{~ab2sum2[14]}}})>>>14;

  assign delay2_typeconvert2 = (ab3sum2[28:0] + {ab3sum2[13], {12{~ab3sum2[13]}}})>>>13;

  always @ ( posedge clk)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay1_section2 <= 0;
        delay2_section2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay1_section2 <= delay1_typeconvert2;
          delay2_section2 <= delay2_typeconvert2;
        end
      end
    end // delay_process_section2

  assign feedback2 = (ab1sum2[33:0] + {ab1sum2[18], {17{~ab1sum2[18]}}})>>>18;

  //   -------- Last Section Value -- Processor Interface logic------------------

  assign mul_temp_12 = feedback2 * coeff_scale3_shadow_reg;
  assign scale3 = (mul_temp_12[30:0] + {mul_temp_12[17], {16{~mul_temp_12[17]}}})>>>17;

  assign coeff_scale3_assigned = (write_address_reg == 4'b0111) ? coeffs_in_reg :
                           coeff_scale3_reg;
  assign coeff_scale3_temp = (write_enable_reg == 1'b1) ? coeff_scale3_assigned :
                       coeff_scale3_reg;
  always @ ( posedge clk)
    begin: coeff_reg_process_Last_ScaleValue
      if (reset == 1'b1) begin
        coeff_scale3_reg <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          coeff_scale3_reg <= coeff_scale3_temp;
        end
      end
    end // coeff_reg_process_Last_ScaleValue

  always @ ( posedge clk)
    begin: coeff_shadow_reg_process_Last_ScaleValue
      if (reset == 1'b1) begin
        coeff_scale3_shadow_reg <= 0;
      end
      else begin
        if (write_done_reg == 1'b1) begin
          coeff_scale3_shadow_reg <= coeff_scale3_reg;
        end
      end
    end // coeff_shadow_reg_process_Last_ScaleValue

  assign output_typeconvert = scale3;

  always @ ( posedge clk)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // Butterworth
