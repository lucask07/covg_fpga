%% DSP Filter
%% Generate SOS Matrix

% %for Cheby I
% fc = 300e3;
% fs = 5e6;
% order = 4;
% PassbandRipple = 1;
% 
% [z, p, k] = cheby1(order, PassbandRipple, fc/(fs/2));
% 
% [sos, g] = zp2sos(z, p, k);
% sos1 = zp2sos(z, p, k);
% figure(1);
% freqz(sos1, 512, fs);

%For Cheby II
fc = 500e3;
fs = 5e6;
order = 4;
StopBandAttenuation = 40;
%StopBandAttenuation = 20;

[z, p, k] = cheby2(order, StopBandAttenuation, fc/(fs/2));

[sos, g] = zp2sos(z, p, k);
sos1 = zp2sos(z, p, k);
figure(1);
freqz(sos1, 512, fs);

%% Input
Fs = 5e6;            % Sampling frequency                    
T = 1/Fs;             % Sampling period       
L = 200;             % Length of signal
%fsine = 10000;        % frequency of test sinewave
%L = round(((1/fsine)/T))*5;
t = (0:L-1)*T;        % Time vector

O = numerictype([],16,0);
j = 4.096*(t>1e-5);
%j = 4.096*sin(2*pi*fsine*t);
%j = 4.096*((0.5e-5<t)&(t<1.5e-5));
%j = 2*sin(2*pi*fsine*t) + sin(2*pi*800000*t) + sin(2*pi*600000*t);
%j = sin(2*pi*20000*t) + 2*randn(size(t));

codes = fi('numerictype', O);
%m = numerictype([], 14, 5);
m = numerictype([], 14, 8);
output = fi('numerictype', m);
figure(2);
%loop that takes the input step function and outputs the hex codes that the
%AD7961 would output
for x = (1:L)
    if (j(x)/4.096)>0
        code = fi((j(x)/4.096)*(2^15-1), 'numerictype', O);
    elseif (j(x)/4.096)<0
        code = fi((j(x)/4.096)*(2^15), 'numerictype', O);
    else
        code = fi(0, 'numerictype', O);
    end
    codes = [codes; code];
    %out = FourthOrderChebOne(code*2^-15, sos, g);
    %out = ReferenceChebOne(code);
    %out = FourthOrderChebTwo(code, sos, g);
    %out = ReferenceChebTwo(code);
    %output = [output, out];
    %plot(t(x), out, '*');
    %stem(t(x), out);
    hold on;
end

output = FourthOrderChebOne(codes*2^-15, sos, g);
stem(t, output);
hold on;

% Plotting Input and Output on same graph
plot(t, codes*2^-15);
%plot(t, codes);
title('Original Signal and Output of IIR Chebyshev LPF');
xlabel('t[s]');
ylabel('Amplitude');

%% Amplitude Spectrum of input/output

Y = fft(double(codes*2^-15));
Y2 = fft(double(output));

P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

P4 = abs(Y2/L);
P3 = P4(1:L/2+1);
P3(2:end-1) = 2*P3(2:end-1);

f = Fs*(0:(L/2))/L;

figure(3);
subplot(2, 1, 1);
stem(f,P1);
title('Single-Sided Amplitude Spectrum of Input');
xlabel('f (Hz)');
ylabel('|P1(f)|');

subplot(2, 1, 2);
stem(f,P3); 
title('Single-Sided Amplitude Spectrum of Output');
xlabel('f (Hz)');
ylabel('|P1(f)|');

%% Plotting Group Delay
figure(4);
grpdelay(sos, 512, fs);
title('Group Delay');

%% Plotting Phase Delay
figure(5);
phasedelay(sos, 512, fs);
title('Phase Delay');

%% Step Response
figure(6);
stepz(sos1, 50, fs)
grid

% step response info/measurements
[h, t] = stepz(sos1, 50, fs);
S = stepinfo(h, t);
disp(S);

%% Cheby One Function
function y = FourthOrderChebOne(x, sos, g)
%SIXTHORDERCHEBTWO Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 28-Jun-2021 11:48:16

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    Gain       = g;  % Gain coefficient vector
    
    % SOS_Matrix coefficient vector
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,15), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,14), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,30), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,45), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],51,45), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],51,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,11), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

% s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
% y = step(Hd,s);
y = Hd(x);


% [EOF]
end

%%
function y = ReferenceChebOne(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 28-Jun-2021 11:26:44

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N     = 6;        % Order
    % Fpass = 500000;   % Passband Frequency
    % Apass = 1;        % Passband Ripple (dB)
    % Fs    = 5000000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,fp,ap', N, Fpass, Apass, Fs);
    %
    % Hd = design(h, 'cheby1', ...
    %     'FilterStructure', 'df2tsos', ...
    %     'SystemObject', true);
    
    Hd = dsp.BiquadFilter( ...
        'SOSMatrix', [1 2 1 1 -1.56402587890625 0.929443359375; 1 2 1 1 ...
        -1.6097412109375 0.8111572265625; 1 2 1 1 -1.69561767578125 ...
        0.74090576171875], ...
        'ScaleValues', [0.091339111328125; 0.05035400390625; ...
        0.011322021484375; 0.891265869140625], ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,15), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,9), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],32,29), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],32,30), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],32,31), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],48,44), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],48,45), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],51,44), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],51,45), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,11), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,8), ...
        'RoundingMethod', 'Convergent');
end

%s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
%y = step(Hd,s);
y = filter(Hd,x);

end

%% Cheby Two Function

function y = FourthOrderChebTwo(x, sos, g)
%FOURTHORDERCHEBTWO Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 28-Jun-2021 09:35:59

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    Gain       = g;  % Gain coefficient vector
    
    % SOS_Matrix coefficient vector
    SOS_Matrix = sos;
    
    Hd = dsp.BiquadFilter( ...
        'SOSMatrix', SOS_Matrix, ...
        'ScaleValues', Gain, ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,10), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,11), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,14), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,15), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,24), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,25), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],33,24), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],33,25), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,5), ...
        'RoundingMethod', 'Convergent');
end

s = fi(x,1,16,15,'RoundingMethod','Round','OverflowAction','Saturate');
y = step(Hd,s);


% [EOF]
end
%% Sample for Cheby II

function y = ReferenceChebTwo(x)
%DOFILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.9 and DSP System Toolbox 9.11.
% Generated on: 28-Jun-2021 09:29:59

%#codegen

% To generate C/C++ code from this function use the codegen command.
% Type 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    %
    % N     = 4;        % Order
    % Fstop = 500000;   % Stopband Frequency
    % Astop = 20;       % Stopband Attenuation (dB)
    % Fs    = 5000000;  % Sampling Frequency
    %
    % h = fdesign.lowpass('n,fst,ast', N, Fstop, Astop, Fs);
    %
    % Hd = design(h, 'cheby2', ...
    %     'FilterStructure', 'df2tsos', ...
    %     'SystemObject', true);
    
    Hd = dsp.BiquadFilter( ...
        'SOSMatrix', [1 -1.5596923828125 1 1 -1.5477294921875 ...
        0.77777099609375; 1 -0.3243408203125 1 1 -1.00701904296875 ...
        0.3050537109375], ...
        'ScaleValues', [0.522491455078125; 0.1778564453125; 1], ...
        'SectionInputDataType', 'Custom', ...
        'CustomSectionInputDataType', numerictype([],16,10), ...
        'SectionOutputDataType', 'Custom', ...
        'CustomSectionOutputDataType', numerictype([],16,11), ...
        'NumeratorCoefficientsDataType', 'Custom', ...
        'CustomNumeratorCoefficientsDataType', numerictype([],16,14), ...
        'DenominatorCoefficientsDataType', 'Custom', ...
        'CustomDenominatorCoefficientsDataType', numerictype([],16,14), ...
        'ScaleValuesDataType', 'Custom', ...
        'CustomScaleValuesDataType', numerictype([],16,15), ...
        'NumeratorProductDataType', 'Custom', ...
        'CustomNumeratorProductDataType', numerictype([],32,24), ...
        'DenominatorProductDataType', 'Custom', ...
        'CustomDenominatorProductDataType', numerictype([],32,25), ...
        'NumeratorAccumulatorDataType', 'Custom', ...
        'CustomNumeratorAccumulatorDataType', numerictype([],33,24), ...
        'DenominatorAccumulatorDataType', 'Custom', ...
        'CustomDenominatorAccumulatorDataType', numerictype([],33,25), ...
        'StateDataType', 'Custom', ...
        'CustomStateDataType', numerictype([],16,15), ...
        'OutputDataType', 'Custom', ...
        'CustomOutputDataType', numerictype([],14,5), ...
        'RoundingMethod', 'Convergent');
end

s = fi(x,1,16,15,'RoundingMethod', 'Round', 'OverflowAction', 'Saturate');
y = step(Hd,s);
end