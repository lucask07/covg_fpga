// -------------------------------------------------------------
// 
// File Name: C:\Users\iande\Desktop\covg_fpga\Matlab\scrapwork\codegen\IIRfilter\hdlsrc\IIRfilter_fixpt_tb.v
// Created: 2021-06-16 10:09:03
// 
// Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: IIRfilter_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module IIRfilter_fixpt_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire y_done;  // ufix1
  wire rdEnb;
  wire y_done_enb;  // ufix1
  reg [6:0] y_addr;  // ufix7
  wire y_active;  // ufix1
  reg [6:0] x_addr;  // ufix7
  wire x_active;  // ufix1
  wire tb_enb;
  wire x_enb;  // ufix1
  wire [6:0] x_addr_delay_1;  // ufix7
  reg signed [31:0] fp_x;  // sfix32
  reg signed [15:0] rawData_x;  // int16
  reg signed [31:0] status_x;  // sfix32
  reg signed [15:0] holdData_x;  // int16
  reg signed [15:0] x_offset;  // int16
  wire signed [15:0] x_1;  // int16
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire ce_out;
  wire signed [13:0] y;  // sfix14_En8
  wire y_enb;  // ufix1
  wire y_lastAddr;  // ufix1
  wire [6:0] y_addr_delay_1;  // ufix7
  reg signed [31:0] fp_y_expected;  // sfix32
  reg signed [13:0] y_expected;  // sfix14_En8
  reg signed [31:0] status_y_expected;  // sfix32
  wire signed [13:0] y_ref;  // sfix14_En8
  reg  y_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign y_done_enb = y_done & rdEnb;



  assign y_active = y_addr != 7'b1100011;



  assign x_active = x_addr != 7'b1100011;



  assign x_enb = x_active & (rdEnb & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 99
  always @(posedge clk or posedge reset)
    begin : x_process
      if (reset == 1'b1) begin
        x_addr <= 7'b0000000;
      end
      else begin
        if (x_enb) begin
          if (x_addr >= 7'b1100011) begin
            x_addr <= 7'b0000000;
          end
          else begin
            x_addr <= x_addr + 7'b0000001;
          end
        end
      end
    end



  assign #1 x_addr_delay_1 = x_addr;

  // Data source for x
  initial
    begin : x_fileread
      fp_x = $fopen("x.dat", "r");
      status_x = $rewind(fp_x);
    end

  always @(x_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_x <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_x = $fscanf(fp_x, "%h", rawData_x);
      end
    end

  // holdData reg for x
  always @(posedge clk or posedge reset)
    begin : stimuli_x
      if (reset) begin
        holdData_x <= 16'bx;
      end
      else begin
        holdData_x <= rawData_x;
      end
    end

  always @(rawData_x or rdEnb)
    begin : stimuli_x_1
      if (rdEnb == 1'b0) begin
        x_offset <= holdData_x;
      end
      else begin
        x_offset <= rawData_x;
      end
    end

  assign #2 x_1 = x_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (check1_done == 1'b0 ? tb_enb :
              1'b0);



  assign #2 enb = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  IIRfilter_fixpt u_IIRfilter_fixpt (.clk(clk),
                                     .reset(reset),
                                     .clk_enable(enb),
                                     .x(x_1),  // int16
                                     .ce_out(ce_out),
                                     .y(y)  // sfix14_En8
                                     );

  assign y_enb = ce_out & y_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 99
  always @(posedge clk or posedge reset)
    begin : y_1_process
      if (reset == 1'b1) begin
        y_addr <= 7'b0000000;
      end
      else begin
        if (y_enb) begin
          if (y_addr >= 7'b1100011) begin
            y_addr <= 7'b0000000;
          end
          else begin
            y_addr <= y_addr + 7'b0000001;
          end
        end
      end
    end



  assign y_lastAddr = y_addr >= 7'b1100011;



  assign y_done = y_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (y_done_enb) begin
          check1_done <= y_done;
        end
      end
    end

  assign #1 y_addr_delay_1 = y_addr;

  // Data source for y_expected
  initial
    begin : y_expected_fileread
      fp_y_expected = $fopen("y_expected.dat", "r");
      status_y_expected = $rewind(fp_y_expected);
    end

  always @(y_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        y_expected <= 14'bx;
      end
      else if (ce_out == 1) begin
        status_y_expected = $fscanf(fp_y_expected, "%h", y_expected);
      end
    end

  assign y_ref = y_expected;

  always @(posedge clk or posedge reset)
    begin : y_checker
      if (reset == 1'b1) begin
        y_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y !== y_ref) begin
          y_testFailure <= 1'b1;
          $display("ERROR in y at time %t : Expected '%h' Actual '%h'", $time, y_ref, y);
        end
      end
    end

  assign testFailure = y_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // IIRfilter_fixpt_tb

