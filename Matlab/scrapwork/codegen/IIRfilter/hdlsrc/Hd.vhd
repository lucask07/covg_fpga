-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\iande\Desktop\covg_fpga\Matlab\scrapwork\codegen\IIRfilter\hdlsrc\Hd.vhd
-- Created: 2021-06-16 10:06:16
-- 
-- Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Hd
-- Source Path: IIRfilter_fixpt/Hd
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IIRfilter_fixpt_pkg.ALL;

ENTITY Hd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Hd_in                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        Hd_out                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En8
        );
END Hd;


ARCHITECTURE rtl OF Hd IS

  -- Signals
  SIGNAL Hd_in_signed                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL scaleconst1                      : signed(15 DOWNTO 0);  -- sfix16_En17
  SIGNAL multiplier_mul_temp              : signed(31 DOWNTO 0);  -- sfix32_En32
  SIGNAL scale1                           : signed(36 DOWNTO 0);  -- sfix37_En32
  SIGNAL scaletypeconvert1                : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL inputconv1                       : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL coeff_a2_section1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeff_a3_section1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delay_section1                   : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL delay_section1_1                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a3mul1                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL a1sum1_cast2                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL typeconvert1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL delay_section1_0                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a2mul1                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL a2sum1_cast2                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Sub_sub_cast                     : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL Sub_sub_cast_1                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a2sum1_temp                      : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a2sum1                           : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Sub_sub_cast_2                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL Sub_sub_cast_3                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum1_temp                      : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum1                           : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL b1mul1                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL b1multypeconvert1                : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b2mul1                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL adder_add_cast                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b2sum1                           : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b3mul1                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL adder_add_cast_1                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b1sum1                           : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL section_result1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL scaleconst2                      : signed(15 DOWNTO 0);  -- sfix16_En17
  SIGNAL multiplier_mul_temp_1            : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL scale2                           : signed(36 DOWNTO 0);  -- sfix37_En32
  SIGNAL scaletypeconvert2                : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL inputconv2                       : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL coeff_a2_section2                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeff_a3_section2                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delay_section2                   : vector_of_signed16(0 TO 1);  -- sfix16_En15 [2]
  SIGNAL delay_section2_1                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a3mul2                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL a1sum2_cast2                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL typeconvert2                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL delay_section2_0                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a2mul2                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL a2sum2_cast2                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Sub_sub_cast_4                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL Sub_sub_cast_5                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a2sum2_temp                      : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a2sum2                           : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Sub_sub_cast_6                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL Sub_sub_cast_7                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum2_temp                      : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum2                           : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL b1mul2                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL b1multypeconvert2                : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b2mul2                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL adder_add_cast_2                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b2sum2                           : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b3mul2                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL adder_add_cast_3                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b1sum2                           : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL section_result2                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL scaleconst3                      : signed(15 DOWNTO 0);  -- sfix16_En17
  SIGNAL multiplier_mul_temp_2            : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL scale3                           : signed(36 DOWNTO 0);  -- sfix37_En32
  SIGNAL scaletypeconvert3                : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL inputconv3                       : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL coeff_a2_section3                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL a1sumtypeconvert3                : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL delay_section3                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL a2mul3                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL a1sum3_cast2                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Sub_sub_cast_8                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL Sub_sub_cast_9                   : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum3_temp                      : signed(34 DOWNTO 0);  -- sfix35_En29
  SIGNAL a1sum3                           : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL b1mul3                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL b1multypeconvert3                : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b2mul3                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL adder_add_cast_4                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL b1sum3                           : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL output_typeconvert               : signed(13 DOWNTO 0);  -- sfix14_En8

BEGIN
  Hd_in_signed <= signed(Hd_in);

  scaleconst1 <= to_signed(16#0BF4#, 16);

  multiplier_mul_temp <= Hd_in_signed * scaleconst1;
  scale1 <= resize(multiplier_mul_temp, 37);

  scaletypeconvert1 <= scale1(36 DOWNTO 21) + ('0' & (scale1(20) AND (scale1(21) OR (scale1(19) OR scale1(18) OR scale1(17) OR scale1(16) OR scale1(15) OR scale1(14) OR scale1(13) OR scale1(12) OR scale1(11) OR scale1(10) OR scale1(9) OR scale1(8) OR scale1(7) OR scale1(6) OR scale1(5) OR scale1(4) OR scale1(3) OR scale1(2) OR scale1(1) OR scale1(0)))));

  inputconv1 <= scaletypeconvert1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  coeff_a2_section1 <= to_signed(-16#6EA3#, 16);

  coeff_a3_section1 <= to_signed(16#349D#, 16);

  delay_section1_1 <= delay_section1(1);

  a3mul1 <= delay_section1_1 * coeff_a3_section1;

  a1sum1_cast2 <= resize(a3mul1, 34);

  delay_process_section1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section1(0) <= typeconvert1;
        delay_section1(1) <= delay_section1(0);
      END IF;
    END IF;
  END PROCESS delay_process_section1_process;


  delay_section1_0 <= delay_section1(0);

  a2mul1 <= delay_section1_0 * coeff_a2_section1;

  a2sum1_cast2 <= resize(a2mul1, 34);

  Sub_sub_cast <= resize(inputconv1, 35);
  Sub_sub_cast_1 <= resize(a2sum1_cast2, 35);
  a2sum1_temp <= Sub_sub_cast - Sub_sub_cast_1;

  a2sum1 <= a2sum1_temp(33 DOWNTO 0);

  Sub_sub_cast_2 <= resize(a2sum1, 35);
  Sub_sub_cast_3 <= resize(a1sum1_cast2, 35);
  a1sum1_temp <= Sub_sub_cast_2 - Sub_sub_cast_3;

  a1sum1 <= a1sum1_temp(33 DOWNTO 0);

  typeconvert1 <= a1sum1(29 DOWNTO 14) + ('0' & (a1sum1(13) AND (a1sum1(14) OR (a1sum1(12) OR a1sum1(11) OR a1sum1(10) OR a1sum1(9) OR a1sum1(8) OR a1sum1(7) OR a1sum1(6) OR a1sum1(5) OR a1sum1(4) OR a1sum1(3) OR a1sum1(2) OR a1sum1(1) OR a1sum1(0)))));

  -- coeff_b1_section1
  b1mul1 <= resize(typeconvert1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  b1multypeconvert1 <= resize(b1mul1, 34);

  -- coeff_b2_section1
  b2mul1 <= resize(delay_section1_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  adder_add_cast <= resize(b2mul1, 34);
  b2sum1 <= b1multypeconvert1 + adder_add_cast;

  -- coeff_b3_section1
  b3mul1 <= resize(delay_section1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  adder_add_cast_1 <= resize(b3mul1, 34);
  b1sum1 <= b2sum1 + adder_add_cast_1;

  section_result1 <= b1sum1(33 DOWNTO 18) + ('0' & (b1sum1(17) AND (b1sum1(18) OR (b1sum1(16) OR b1sum1(15) OR b1sum1(14) OR b1sum1(13) OR b1sum1(12) OR b1sum1(11) OR b1sum1(10) OR b1sum1(9) OR b1sum1(8) OR b1sum1(7) OR b1sum1(6) OR b1sum1(5) OR b1sum1(4) OR b1sum1(3) OR b1sum1(2) OR b1sum1(1) OR b1sum1(0)))));

  scaleconst2 <= to_signed(16#0A73#, 16);

  multiplier_mul_temp_1 <= section_result1 * scaleconst2;
  scale2 <= multiplier_mul_temp_1 & '0' & '0' & '0' & '0' & '0';

  scaletypeconvert2 <= scale2(36 DOWNTO 21) + ('0' & (scale2(20) AND (scale2(21) OR (scale2(19) OR scale2(18) OR scale2(17) OR scale2(16) OR scale2(15) OR scale2(14) OR scale2(13) OR scale2(12) OR scale2(11) OR scale2(10) OR scale2(9) OR scale2(8) OR scale2(7) OR scale2(6) OR scale2(5) OR scale2(4) OR scale2(3) OR scale2(2) OR scale2(1) OR scale2(0)))));

  inputconv2 <= scaletypeconvert2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  coeff_a2_section2 <= to_signed(-16#60B7#, 16);

  coeff_a3_section2 <= to_signed(16#25F0#, 16);

  delay_section2_1 <= delay_section2(1);

  a3mul2 <= delay_section2_1 * coeff_a3_section2;

  a1sum2_cast2 <= resize(a3mul2, 34);

  delay_process_section2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section2(0) <= typeconvert2;
        delay_section2(1) <= delay_section2(0);
      END IF;
    END IF;
  END PROCESS delay_process_section2_process;


  delay_section2_0 <= delay_section2(0);

  a2mul2 <= delay_section2_0 * coeff_a2_section2;

  a2sum2_cast2 <= resize(a2mul2, 34);

  Sub_sub_cast_4 <= resize(inputconv2, 35);
  Sub_sub_cast_5 <= resize(a2sum2_cast2, 35);
  a2sum2_temp <= Sub_sub_cast_4 - Sub_sub_cast_5;

  a2sum2 <= a2sum2_temp(33 DOWNTO 0);

  Sub_sub_cast_6 <= resize(a2sum2, 35);
  Sub_sub_cast_7 <= resize(a1sum2_cast2, 35);
  a1sum2_temp <= Sub_sub_cast_6 - Sub_sub_cast_7;

  a1sum2 <= a1sum2_temp(33 DOWNTO 0);

  typeconvert2 <= a1sum2(29 DOWNTO 14) + ('0' & (a1sum2(13) AND (a1sum2(14) OR (a1sum2(12) OR a1sum2(11) OR a1sum2(10) OR a1sum2(9) OR a1sum2(8) OR a1sum2(7) OR a1sum2(6) OR a1sum2(5) OR a1sum2(4) OR a1sum2(3) OR a1sum2(2) OR a1sum2(1) OR a1sum2(0)))));

  -- coeff_b1_section2
  b1mul2 <= resize(typeconvert2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  b1multypeconvert2 <= resize(b1mul2, 34);

  -- coeff_b2_section2
  b2mul2 <= resize(delay_section2_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  adder_add_cast_2 <= resize(b2mul2, 34);
  b2sum2 <= b1multypeconvert2 + adder_add_cast_2;

  -- coeff_b3_section2
  b3mul2 <= resize(delay_section2_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  adder_add_cast_3 <= resize(b3mul2, 34);
  b1sum2 <= b2sum2 + adder_add_cast_3;

  section_result2 <= b1sum2(33 DOWNTO 18) + ('0' & (b1sum2(17) AND (b1sum2(18) OR (b1sum2(16) OR b1sum2(15) OR b1sum2(14) OR b1sum2(13) OR b1sum2(12) OR b1sum2(11) OR b1sum2(10) OR b1sum2(9) OR b1sum2(8) OR b1sum2(7) OR b1sum2(6) OR b1sum2(5) OR b1sum2(4) OR b1sum2(3) OR b1sum2(2) OR b1sum2(1) OR b1sum2(0)))));

  scaleconst3 <= to_signed(16#4771#, 16);

  multiplier_mul_temp_2 <= section_result2 * scaleconst3;
  scale3 <= multiplier_mul_temp_2 & '0' & '0' & '0' & '0' & '0';

  scaletypeconvert3 <= scale3(36 DOWNTO 21) + ('0' & (scale3(20) AND (scale3(21) OR (scale3(19) OR scale3(18) OR scale3(17) OR scale3(16) OR scale3(15) OR scale3(14) OR scale3(13) OR scale3(12) OR scale3(11) OR scale3(10) OR scale3(9) OR scale3(8) OR scale3(7) OR scale3(6) OR scale3(5) OR scale3(4) OR scale3(3) OR scale3(2) OR scale3(1) OR scale3(0)))));

  inputconv3 <= scaletypeconvert3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  coeff_a2_section3 <= to_signed(-16#2E24#, 16);

  delay_process_section3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section3 <= a1sumtypeconvert3;
      END IF;
    END IF;
  END PROCESS delay_process_section3_process;


  a2mul3 <= delay_section3 * coeff_a2_section3;

  a1sum3_cast2 <= resize(a2mul3, 34);

  Sub_sub_cast_8 <= resize(inputconv3, 35);
  Sub_sub_cast_9 <= resize(a1sum3_cast2, 35);
  a1sum3_temp <= Sub_sub_cast_8 - Sub_sub_cast_9;

  a1sum3 <= a1sum3_temp(33 DOWNTO 0);

  a1sumtypeconvert3 <= a1sum3(29 DOWNTO 14) + ('0' & (a1sum3(13) AND (a1sum3(14) OR (a1sum3(12) OR a1sum3(11) OR a1sum3(10) OR a1sum3(9) OR a1sum3(8) OR a1sum3(7) OR a1sum3(6) OR a1sum3(5) OR a1sum3(4) OR a1sum3(3) OR a1sum3(2) OR a1sum3(1) OR a1sum3(0)))));

  -- coeff_b1_section3
  b1mul3 <= resize(a1sumtypeconvert3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  b1multypeconvert3 <= resize(b1mul3, 34);

  -- coeff_b2_section3
  b2mul3 <= resize(delay_section3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  adder_add_cast_4 <= resize(b2mul3, 34);
  b1sum3 <= b1multypeconvert3 + adder_add_cast_4;

  output_typeconvert <= b1sum3(33 DOWNTO 20) + ('0' & (b1sum3(19) AND (b1sum3(20) OR (b1sum3(18) OR b1sum3(17) OR b1sum3(16) OR b1sum3(15) OR b1sum3(14) OR b1sum3(13) OR b1sum3(12) OR b1sum3(11) OR b1sum3(10) OR b1sum3(9) OR b1sum3(8) OR b1sum3(7) OR b1sum3(6) OR b1sum3(5) OR b1sum3(4) OR b1sum3(3) OR b1sum3(2) OR b1sum3(1) OR b1sum3(0)))));

  Hd_out <= std_logic_vector(output_typeconvert);

END rtl;

