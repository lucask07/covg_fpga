// -------------------------------------------------------------
// 
// File Name: C:\Users\iande\Desktop\biquad_hdlcoder\biquad_hdlcoder\codegen\mlhdlc_biquad\hdlsrc\mlhdlc_biquad_fixpt_tb.v
// Created: 2022-06-01 10:47:00
// 
// Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_out                         ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mlhdlc_biquad_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mlhdlc_biquad_fixpt_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire [15:0] rawData_b_0;  // ufix16_En18
  wire [15:0] rawData_b_1;  // ufix16_En18
  wire [15:0] rawData_b_2;  // ufix16_En18
  wire signed [15:0] rawData_a_0;  // sfix16_En14
  wire signed [15:0] rawData_a_1;  // sfix16_En14
  wire signed [15:0] rawData_a_2;  // sfix16_En14
  wire y_out_done;  // ufix1
  wire ce_out;
  wire y_out_done_enb;  // ufix1
  reg [10:0] y_out_addr;  // ufix11
  wire y_out_active;  // ufix1
  reg signed [15:0] holdData_a_2;  // sfix16_En14
  wire phase_0;
  reg signed [15:0] a_2_offset;  // sfix16_En14
  wire signed [15:0] a_2_1;  // sfix16_En14
  reg signed [15:0] holdData_a_1;  // sfix16_En14
  reg signed [15:0] a_1_offset;  // sfix16_En14
  wire signed [15:0] a_1_1;  // sfix16_En14
  reg signed [15:0] holdData_a_0;  // sfix16_En14
  reg signed [15:0] a_0_offset;  // sfix16_En14
  wire signed [15:0] a_0_1;  // sfix16_En14
  reg [15:0] holdData_b_2;  // ufix16_En18
  reg [15:0] b_2_offset;  // ufix16_En18
  wire [15:0] b_2_1;  // ufix16_En18
  reg [15:0] holdData_b_1;  // ufix16_En18
  reg [15:0] b_1_offset;  // ufix16_En18
  wire [15:0] b_1_1;  // ufix16_En18
  reg [15:0] holdData_b_0;  // ufix16_En18
  reg [15:0] b_0_offset;  // ufix16_En18
  wire [15:0] b_0_1;  // ufix16_En18
  reg [10:0] x_in_addr;  // ufix11
  wire x_in_active;  // ufix1
  wire tb_enb;
  wire x_in_enb;  // ufix1
  wire [10:0] x_in_addr_delay_1;  // ufix11
  reg signed [31:0] fp_x_in;  // sfix32
  reg signed [15:0] rawData_x_in;  // sfix16_En15
  reg signed [31:0] status_x_in;  // sfix32
  reg signed [15:0] holdData_x_in;  // sfix16_En15
  reg signed [15:0] x_in_offset;  // sfix16_En15
  wire signed [15:0] x_in_1;  // sfix16_En15
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb_delay;
  reg [5:0] counter;  // ufix6
  wire phasesel_0_relop1;
  wire notDone;
  wire signed [15:0] y_out;  // sfix16_En15
  wire y_out_enb;  // ufix1
  wire y_out_lastAddr;  // ufix1
  wire [10:0] y_out_addr_delay_1;  // ufix11
  reg signed [31:0] fp_y_out_expected;  // sfix32
  reg signed [15:0] y_out_expected;  // sfix16_En15
  reg signed [31:0] status_y_out_expected;  // sfix32
  wire signed [15:0] y_out_ref;  // sfix16_En15
  reg  y_out_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for b_0
  assign rawData_b_0 = 16'b0100010100010010;



  // Data source for b_1
  assign rawData_b_1 = 16'b1000101000100101;



  // Data source for b_2
  assign rawData_b_2 = 16'b0100010100010010;



  // Data source for a_0
  assign rawData_a_0 = 16'sb0100000000000000;



  // Data source for a_1
  assign rawData_a_1 = 16'sb1011011011011001;



  // Data source for a_2
  assign rawData_a_2 = 16'sb0001101001101011;



  assign y_out_done_enb = y_out_done & ce_out;



  assign y_out_active = y_out_addr != 11'b11111010000;



  // holdData reg for a
  always @(posedge clk)
    begin : stimuli_a
      if (reset) begin
        holdData_a_2 <= 16'bx;
      end
      else begin
        holdData_a_2 <= rawData_a_2;
      end
    end

  always @(rawData_a_2 or phase_0)
    begin : stimuli_a_1
      if (phase_0 == 1'b0) begin
        a_2_offset <= holdData_a_2;
      end
      else begin
        a_2_offset <= rawData_a_2;
      end
    end

  assign #2 a_2_1 = a_2_offset;

  // holdData reg for a
  always @(posedge clk)
    begin : stimuli_a_2
      if (reset) begin
        holdData_a_1 <= 16'bx;
      end
      else begin
        holdData_a_1 <= rawData_a_1;
      end
    end

  always @(rawData_a_1 or phase_0)
    begin : stimuli_a_3
      if (phase_0 == 1'b0) begin
        a_1_offset <= holdData_a_1;
      end
      else begin
        a_1_offset <= rawData_a_1;
      end
    end

  assign #2 a_1_1 = a_1_offset;

  // holdData reg for a
  always @(posedge clk)
    begin : stimuli_a_4
      if (reset) begin
        holdData_a_0 <= 16'bx;
      end
      else begin
        holdData_a_0 <= rawData_a_0;
      end
    end

  always @(rawData_a_0 or phase_0)
    begin : stimuli_a_5
      if (phase_0 == 1'b0) begin
        a_0_offset <= holdData_a_0;
      end
      else begin
        a_0_offset <= rawData_a_0;
      end
    end

  assign #2 a_0_1 = a_0_offset;

  // holdData reg for b
  always @(posedge clk)
    begin : stimuli_b
      if (reset) begin
        holdData_b_2 <= 16'bx;
      end
      else begin
        holdData_b_2 <= rawData_b_2;
      end
    end

  always @(rawData_b_2 or phase_0)
    begin : stimuli_b_1
      if (phase_0 == 1'b0) begin
        b_2_offset <= holdData_b_2;
      end
      else begin
        b_2_offset <= rawData_b_2;
      end
    end

  assign #2 b_2_1 = b_2_offset;

  // holdData reg for b
  always @(posedge clk)
    begin : stimuli_b_2
      if (reset) begin
        holdData_b_1 <= 16'bx;
      end
      else begin
        holdData_b_1 <= rawData_b_1;
      end
    end

  always @(rawData_b_1 or phase_0)
    begin : stimuli_b_3
      if (phase_0 == 1'b0) begin
        b_1_offset <= holdData_b_1;
      end
      else begin
        b_1_offset <= rawData_b_1;
      end
    end

  assign #2 b_1_1 = b_1_offset;

  // holdData reg for b
  always @(posedge clk)
    begin : stimuli_b_4
      if (reset) begin
        holdData_b_0 <= 16'bx;
      end
      else begin
        holdData_b_0 <= rawData_b_0;
      end
    end

  always @(rawData_b_0 or phase_0)
    begin : stimuli_b_5
      if (phase_0 == 1'b0) begin
        b_0_offset <= holdData_b_0;
      end
      else begin
        b_0_offset <= rawData_b_0;
      end
    end

  assign #2 b_0_1 = b_0_offset;

  assign x_in_active = x_in_addr != 11'b11111010000;



  assign x_in_enb = x_in_active & (phase_0 & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2000
  always @(posedge clk)
    begin : x_in_process
      if (reset == 1'b1) begin
        x_in_addr <= 11'b00000000000;
      end
      else begin
        if (x_in_enb) begin
          if (x_in_addr >= 11'b11111010000) begin
            x_in_addr <= 11'b00000000000;
          end
          else begin
            x_in_addr <= x_in_addr + 11'b00000000001;
          end
        end
      end
    end



  assign #1 x_in_addr_delay_1 = x_in_addr;

  // Data source for x_in
  initial
    begin : x_in_fileread
      fp_x_in = $fopen("x_in.dat", "r");
      status_x_in = $rewind(fp_x_in);
    end

  always @(x_in_addr_delay_1, phase_0, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_x_in <= 16'bx;
      end
      else if (phase_0 == 1) begin
        status_x_in = $fscanf(fp_x_in, "%h", rawData_x_in);
      end
    end

  // holdData reg for x_in
  always @(posedge clk)
    begin : stimuli_x_in
      if (reset) begin
        holdData_x_in <= 16'bx;
      end
      else begin
        holdData_x_in <= rawData_x_in;
      end
    end

  always @(rawData_x_in or phase_0)
    begin : stimuli_x_in_1
      if (phase_0 == 1'b0) begin
        x_in_offset <= holdData_x_in;
      end
      else begin
        x_in_offset <= rawData_x_in;
      end
    end

  assign #2 x_in_1 = x_in_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  assign tb_enb_delay = tb_enb;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 39
  always @(posedge clk)
    begin : slow_clock_enable_process
      if (reset == 1'b1) begin
        counter <= 6'b000001;
      end
      else begin
        if (tb_enb_delay) begin
          if (counter >= 6'b100111) begin
            counter <= 6'b000000;
          end
          else begin
            counter <= counter + 6'b000001;
          end
        end
      end
    end



  assign phasesel_0_relop1 = counter == 6'b000000;



  assign phase_0 = phasesel_0_relop1 & tb_enb;



  assign notDone = phase_0 & snkDonen;



  assign #2 enb = notDone;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  mlhdlc_biquad_fixpt u_mlhdlc_biquad_fixpt (.clk(clk),
                                             .reset(reset),
                                             .clk_enable(enb),
                                             .x_in(x_in_1),  // sfix16_En15
                                             .b_0(b_0_1),  // ufix16_En18
                                             .b_1(b_1_1),  // ufix16_En18
                                             .b_2(b_2_1),  // ufix16_En18
                                             .a_0(a_0_1),  // sfix16_En14
                                             .a_1(a_1_1),  // sfix16_En14
                                             .a_2(a_2_1),  // sfix16_En14
                                             .ce_out(ce_out),
                                             .y_out(y_out)  // sfix16_En15
                                             );

  wire ce_out2;
  wire signed [15:0] y_out2;

  mlhdlc_biquad_fixpt_folded u2_mlhdlc_biquad_fixpt (.clk(clk),
                                              .reset(reset),
                                              .clk_enable(enb),
                                              .x_in(x_in_1),  // sfix16_En15
                                              .b_0(b_0_1),  // ufix16_En18
                                              .b_1(b_1_1),  // ufix16_En18
                                              .b_2(b_2_1),  // ufix16_En18
                                              .a_0(a_0_1),  // sfix16_En14
                                              .a_1(a_1_1),  // sfix16_En14
                                              .a_2(a_2_1),  // sfix16_En14
                                              .ce_out(ce_out2),
                                              .y_out(y_out2)  // sfix16_En15
                                              );

  assign y_out_enb = ce_out & y_out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2000
  always @(posedge clk)
    begin : y_out_1_process
      if (reset == 1'b1) begin
        y_out_addr <= 11'b00000000000;
      end
      else begin
        if (y_out_enb) begin
          if (y_out_addr >= 11'b11111010000) begin
            y_out_addr <= 11'b00000000000;
          end
          else begin
            y_out_addr <= y_out_addr + 11'b00000000001;
          end
        end
      end
    end



  assign y_out_lastAddr = y_out_addr >= 11'b11111010000;



  assign y_out_done = y_out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (y_out_done_enb) begin
          check1_done <= y_out_done;
        end
      end
    end

  assign #1 y_out_addr_delay_1 = y_out_addr;

  // Data source for y_out_expected
  initial
    begin : y_out_expected_fileread
      fp_y_out_expected = $fopen("y_out_expected.dat", "r");
      status_y_out_expected = $rewind(fp_y_out_expected);
    end

  always @(y_out_addr_delay_1,  tb_enb)
    begin
      if (tb_enb == 0) begin
        y_out_expected <= 16'bx;
      end
      else  begin
        status_y_out_expected = $fscanf(fp_y_out_expected, "%h", y_out_expected);
      end
    end

  assign y_out_ref = y_out_expected;

  always @(posedge clk or posedge reset)
    begin : y_out_checker
      if (reset == 1'b1) begin
        y_out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y_out !== y_out_ref) begin
          y_out_testFailure <= 1'b1;
          $display("ERROR in y_out at time %t : Expected '%h' Actual '%h'", $time, y_out_ref, y_out);
        end
        if (ce_out2 == 1'b1 && y_out !== y_out2) begin
          $display("MISMATCH in y_out and y_out2 at time %t : Y_out '%h' Folded out '%h'", $time, y_out, y_out2);
        end
      end
    end

  assign testFailure = y_out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // mlhdlc_biquad_fixpt_tb

