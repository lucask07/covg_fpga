// -------------------------------------------------------------
// 
// File Name: C:\Users\iande\Desktop\biquad_hdlcoder\biquad_hdlcoder\codegen\mlhdlc_biquad\hdlsrc\mlhdlc_biquad_fixpt.v
// Created: 2022-06-01 10:46:35
// 
// Generated by MATLAB 9.9, MATLAB Coder 5.1 and HDL Coder 3.17
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_out                         ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mlhdlc_biquad_fixpt
// Source Path: mlhdlc_biquad_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mlhdlc_biquad_fixpt
          (clk,
           reset,
           clk_enable,
           x_in,
           b_0,
           b_1,
           b_2,
           a_0,
           a_1,
           a_2,
           ce_out,
           y_out);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] x_in;  // sfix16_En15
  input   [15:0] b_0;  // ufix16_En18
  input   [15:0] b_1;  // ufix16_En18
  input   [15:0] b_2;  // ufix16_En18
  input   signed [15:0] a_0;  // sfix16_En14
  input   signed [15:0] a_1;  // sfix16_En14
  input   signed [15:0] a_2;  // sfix16_En14
  output  ce_out;
  output  signed [15:0] y_out;  // sfix16_En15


  wire enb;
  wire [15:0] b [0:2];  // ufix16_En18 [3]
  wire signed [15:0] a [0:2];  // sfix16_En14 [3]
  wire signed [15:0] tmp;  // sfix16_En16
  wire signed [16:0] p7tmp_cast;  // sfix17_En18
  wire signed [32:0] p7tmp_mul_temp;  // sfix33_En33
  wire signed [31:0] p7tmp_sub_cast;  // sfix32_En33
  wire signed [36:0] p7tmp_sub_cast_1;  // sfix37_En33
  wire signed [31:0] p7tmp_mul_temp_1;  // sfix32_En29
  wire signed [36:0] p7tmp_sub_cast_2;  // sfix37_En33
  wire signed [36:0] p7tmp_sub_temp;  // sfix37_En33
  reg signed [15:0] s2;  // sfix16_En16
  wire signed [15:0] tmp_1;  // sfix16_En15
  wire signed [33:0] p5tmp_add_cast;  // sfix34_En33
  wire signed [16:0] p5tmp_cast;  // sfix17_En18
  wire signed [32:0] p5tmp_mul_temp;  // sfix33_En33
  wire signed [31:0] p5tmp_add_cast_1;  // sfix32_En33
  wire signed [33:0] p5tmp_add_cast_2;  // sfix34_En33
  wire signed [33:0] p5tmp_add_temp;  // sfix34_En33
  wire signed [36:0] p5tmp_sub_cast;  // sfix37_En33
  wire signed [31:0] p5tmp_mul_temp_1;  // sfix32_En29
  wire signed [36:0] p5tmp_sub_cast_1;  // sfix37_En33
  wire signed [36:0] p5tmp_sub_temp;  // sfix37_En33
  reg signed [15:0] s1;  // sfix16_En15
  wire signed [34:0] p3y_out_add_cast;  // sfix35_En33
  wire signed [16:0] p3y_out_cast;  // sfix17_En18
  wire signed [32:0] p3y_out_mul_temp;  // sfix33_En33
  wire signed [31:0] p3y_out_add_cast_1;  // sfix32_En33
  wire signed [34:0] p3y_out_add_cast_2;  // sfix35_En33
  wire signed [34:0] p3y_out_add_temp;  // sfix35_En33


  assign b[0] = b_0;
  assign b[1] = b_1;
  assign b[2] = b_2;

  assign a[0] = a_0;
  assign a[1] = a_1;
  assign a[2] = a_2;

  assign enb = clk_enable;

  // state 2 
  assign p7tmp_cast = {1'b0, b[2]};
  assign p7tmp_mul_temp = p7tmp_cast * x_in;
  assign p7tmp_sub_cast = p7tmp_mul_temp[31:0];
  assign p7tmp_sub_cast_1 = {{5{p7tmp_sub_cast[31]}}, p7tmp_sub_cast};
  assign p7tmp_mul_temp_1 = a[2] * y_out;
  assign p7tmp_sub_cast_2 = {p7tmp_mul_temp_1[31], {p7tmp_mul_temp_1, 4'b0000}};
  assign p7tmp_sub_temp = p7tmp_sub_cast_1 - p7tmp_sub_cast_2;
  assign tmp = p7tmp_sub_temp[32:17];



  // state 1 
  always @(posedge clk)
    begin : s2_reg_process
      if (reset == 1'b1) begin
        s2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          s2 <= tmp;
          $display("Un-Folded: s2 = %h", s2);
        end
      end
    end



  assign p5tmp_add_cast = {s2[15], {s2, 17'b00000000000000000}};
  assign p5tmp_cast = {1'b0, b[1]};
  assign p5tmp_mul_temp = p5tmp_cast * x_in;
  assign p5tmp_add_cast_1 = p5tmp_mul_temp[31:0];
  assign p5tmp_add_cast_2 = {{2{p5tmp_add_cast_1[31]}}, p5tmp_add_cast_1};
  assign p5tmp_add_temp = p5tmp_add_cast + p5tmp_add_cast_2;
  assign p5tmp_sub_cast = {{3{p5tmp_add_temp[33]}}, p5tmp_add_temp};
  assign p5tmp_mul_temp_1 = a[1] * y_out;
  assign p5tmp_sub_cast_1 = {p5tmp_mul_temp_1[31], {p5tmp_mul_temp_1, 4'b0000}};
  assign p5tmp_sub_temp = p5tmp_sub_cast - p5tmp_sub_cast_1;
  assign tmp_1 = p5tmp_sub_temp[33:18];



  // HDL code generation from MATLAB function: mlhdlc_biquad_fixpt
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  //                                                                          %
  // 
  //           Generated by MATLAB 9.9 and Fixed-Point Designer 7.1           %
  // 
  //                                                                          %
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  // MATLAB design: Biquad for IIR
  // 
  // 
  // 
  // Introduction: https://ccrma.stanford.edu/~jos/fp/Transposed_Direct_Forms.html
  // 
  // Transposed DF-II
  // 
  //   Modified by LJK from MATLAB IIR example
  // 
  //   This has been shown to match the MATLAB dsp.BiquadFilter 
  // 
  // %%%%%%% 
  // 
  // IIR biquad Filter
  // 
  // declare and initialize the delay registers
  // 
  // filtered output (order of update to y_out, s1, s2 might matter so update
  // 
  //   registers that impact other registers last)
  always @(posedge clk)
    begin : s1_reg_process
      if (reset == 1'b1) begin
        s1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          s1 <= tmp_1;
          $display("Un-Folded: s1 = %h", s1);
        end
      end
    end



  assign p3y_out_add_cast = {s1[15], {s1, 18'b000000000000000000}};
  assign p3y_out_cast = {1'b0, b[0]};
  assign p3y_out_mul_temp = p3y_out_cast * x_in;
  assign p3y_out_add_cast_1 = p3y_out_mul_temp[31:0];
  assign p3y_out_add_cast_2 = {{3{p3y_out_add_cast_1[31]}}, p3y_out_add_cast_1};
  assign p3y_out_add_temp = p3y_out_add_cast + p3y_out_add_cast_2;
  assign y_out = p3y_out_add_temp[33:18];



  assign ce_out = clk_enable;

endmodule  // mlhdlc_biquad_fixpt

